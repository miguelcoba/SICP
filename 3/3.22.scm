(define (make-queue)
  (let ((front-ptr '())
	(rear-ptr '()))
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
	  (error "FRONT called with an empty queue" (print-queue))
	  (car front-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
	(cond ((empty-queue?)
	       (set-front-ptr! new-pair)
	       (set-rear-ptr! new-pair)
	       dispatch)
	      (else
	       (set-cdr! rear-ptr new-pair)
	       (set-rear-ptr! new-pair)
	       dispatch))))
    (define (delete-queue!)
      (cond ((empty-queue?)
	     (error "DELETE! called wih an empty queue" (print-queue)))
	    (else
	     (set-front-ptr! (cdr front-ptr))
	     dispatch)))
    (define (print-queue)
      (display front-ptr))
    (define (dispatch m)
      (cond ((eq? m 'front-queue) front-queue)
	    ((eq? m 'insert-queue!) insert-queue!)
	    ((eq? m 'delete-queue!) delete-queue!)
	    ((eq? m 'print-queue) print-queue)))
    dispatch))

(define (insert-queue! queue item)
  ((queue 'insert-queue!) item))
(define (delete-queue! queue)
  ((queue 'delete-queue!)))
(define (front-queue queue item)
  ((queue 'front-queue) item))
(define (print-queue queue)
  ((queue 'print-queue)))

(define q (make-queue))

(insert-queue! q 'a)

(print-queue q)
(a)

(insert-queue! q 'b)
(insert-queue! q 'c)

(print-queue q)
(a b c)

(delete-queue! q)
(print-queue q)
(b c)
(delete-queue! q)
(print-queue q)
(c)
(delete-queue! q)
(print-queue q)
()

